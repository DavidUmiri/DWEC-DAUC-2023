// mapas

let map = new Map();
map.set("Clave", ["Valor1","Valor2","Valor3"])
map.set("Andalucia", ["Granada","Almeria","Cadiz"])
map.set("Madrid", ["Vallecas","Elipa","Mostoles"])

// formularios

acceder a text --> elemento.value
radio button --> se agrupan con un name común --> atributo value y checked (true si está seleccionado)
select --> atributo options --> atributo selectIndex --> -1 si no está seleccionada

// formularios validación

let nombre = document.forms["idFormulario"].elements["idNombre"]
nombre.checkValidity() --> true --> si pasa la validación
nombre.validity --> propiedades
nombre.validationMessage --> devuelve el mensaje por defecto
modificar ese mensaje --> nombre.setCustomValidity("error")
nombre.validationMessage --> devuelve el mensaje

// funciones validación

checkValidity() --> nos dice si el campo al que se aplica es o no válido

validationMessage --> texto del error de validación

validity:

	valueMissing -->  valdrá true si el campo tiene el atributo required pero no se ha introducido nada en él
	typeMismatch --> indica si el contenido del campo no cumple con su atributo type
	patternMismatch --> indica si no se cumple con el pattern indicado
	tooShort / tooLong --> indica si no se cumple el atributo minlength/maxlength
	rangeUnderflow / rangeOverflow --> indica si no se cumple el atributo min / max
	stepMismatch --> indica si no se cumple el atributo step del campo 
	customError --> indica al campo se le ha puesto un error personalizado con setCustomValidity
	valid --> indica si este campo es válido

// vuejs

exámen --> formularios y vuejs

página web que usaremos en el exámen --> 
	https://agustinprf.github.io/dwec/

estilos de api --> options api y composition api

nosotros vamos a usar --> Composition API (VUE 3)

Composition API --> mejora la reutilización de código y su organización por funcionalidades

documentación oficial --> 
	https://vuejs.org/guide/introduction.html

15 píldoras --> 
	https://vuejs.org/tutorial/#step-1

ejemplos --> 
	https://vuejs.org/examples/#hello-world

entorno -->
	sudo apt-get install nodejs npm 
	node -v
	npm -version

comandos --> 
	npm init vue@latest

en la carpeta -->
	npm install

para levantar el servidor -->
	npm run dev

servidor --> 
	➜  Local:   http://127.0.0.1:5173/
  	➜  Network: use --host to expose
  	➜  press h to show help

Shortcuts --> atajos
	press r to restart the server
	press u to show server url
	press o to open in browser
	press q to quit

// componentes

<template></template>

<script></script>

<style lang="scss"></style>

// parámetros

<script setup>
    defineProps({
        parametro: {
            type: String,
            required: true
        }
    })
</script>

<template>
    <h1> {{ parametro }} </h1>
</template>

// 15 PÍLDORAS

ref --> para elementos simples
reactive --> para objetos

// variables a utillizar en el template

const contador = reactive({ contador: 0 })
const mensaje = ref('Hello World!')

// variables internas que no utilizare en el template

const autor = null
console.log(mensaje.value);
console.log(contador.cuenta);

REF
	Elementos simples
	value

REACTIVE
	Object
	value NO

// para vincular un atributo a un valor dinámico, usamos la directiva v-bind

<div v-bind:id="dynamicId"></div>

// package.json --> configuraciones y dependencias

instalar vue-router --> 
	npm install vue-router
	npm install

// levantar un servidor con una base de datos

npm install -g json-server
json-server --watch bd.json

GET    /posts
GET    /posts/1
POST   /posts
PUT    /posts/1
PATCH  /posts/1
DELETE /posts/1

// axios sirve para manejar APIs

npm install axios
npm install

// navegador

apartado --> network
sección --> fetch/xhr

// recordar antes de empezar

npm run dev
json-server --watch src/data/bd.json

// API --> servidor --> json-server

métodos --> get, post, delete

// formulario

let productos = ref(null)
let nombreProducto = ref(null)
let productoObj = reactive({nombre:null, descripcion: null})

function crearProducto(){
	servicioDatosProducto.create(JSON.stringify(productoObj)).then(response => {
		alert("Ha insertado el elemento...")
	}).catch(e=>{
		alert("Error al insertar...")
	});
	obtenerProductos();
}

form @submit.prevent="crearProducto"

input v-model="productoObj.nombre"
input v-model="productoObj.descripcion"

// objetivo de hoy

hacer una API -->

si es publica --> get lo almacenas en una variable data que sera un arrau --> post/delete (en local)

si es propia --> json-server (bd.json) --> get/post/delete

baseURL: "https://api.unsplash.com/",

Authorization: Client-ID YOUR_ACCESS_KEY

https://api.unsplash.com/photos/?client_id=YOUR_ACCESS_KEY

YOUR_ACCESS_KEY --> tDmWuSHock3LaL3PHw3p260slWA-Rf5PPVTWa913kEY

{
  "urls": {
     "raw": "https://images.unsplash.com/photo-1461988320302-91bde64fc8e4?ixid=2yJhcHBfaWQiOjEyMDd9",
     "full": "https://images.unsplash.com/photo-1461988320302-91bde64fc8e4?ixid=2yJhcHBfaWQiOjEyMDd9&fm=jpg&q=80",
     "regular": "https://images.unsplash.com/photo-1461988320302-91bde64fc8e4?ixid=2yJhcHBfaWQiOjEyMDd9&fm=jpg&fit=crop&w=1080&q=80&fit=max",
     "small": "https://images.unsplash.com/photo-1461988320302-91bde64fc8e4?ixid=2yJhcHBfaWQiOjEyMDd9&&fm=jpg&w=400&fit=max",
     "thumb": "https://images.unsplash.com/photo-1461988320302-91bde64fc8e4?ixid=2yJhcHBfaWQiOjEyMDd9&fm=jpg&w=200&fit=max"
  },
  // ... other photo fields
}

Códigos de estado -->

200 - Bien	Todo funcionó como se esperaba

400 Petición Incorrecta	La solicitud fue inaceptable, a menudo debido a la falta de un parámetro requerido

401 - No autorizado	Token de acceso no válido

403 - Prohibido	Faltan permisos para realizar la solicitud

404 No encontrado	El recurso solicitado no existe

500, 503	Algo salió mal de nuestra parte

Parámetros --> 

collections
topics
username
query
orientation
content_filter
count

Tamaño de la imagen --> 

https://source.unsplash.com/random/800x600

https://source.unsplash.com/category/nature/800x600

https://source.unsplash.com/collection/240395/800x600

https://source.unsplash.com/800x600/daily

https://source.unsplash.com/random/800x600/?river,park

actualizar dependencias -->

npm install -g npm-check-updates
ncu
ncu -u
npm install